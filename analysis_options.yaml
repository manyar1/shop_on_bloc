# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

dart_code_metrics:
  anti-patterns:
    - long-method
    - long-parameter-list
  metrics:
    cyclomatic-complexity: 20
    maximum-nesting-level: 5
    number-of-parameters: 4
    source-lines-of-code: 175
  metrics-exclude:
    - test/**
  rules:
    - avoid-global-state
    - always-remove-listener
    - prefer-async-await
    - prefer-first
    - prefer-last
    - prefer-immediate-return
    - no-boolean-literal-compare
    - format-comment
    - prefer-trailing-comma
    - prefer-conditional-expressions
    - no-equal-then-else
    - avoid-unused-parameters
    - binary-expression-operand-order
    - double-literal-format
    - no-boolean-literal-compare
    - no-object-declaration
    - prefer_contains
    - prefer_if_null_operators
    - sort_child_properties_last
    - unnecessary_brace_in_string_interps
    - unnecessary_this
    - prefer-correct-type-name
    - avoid-unnecessary-setstate
    - prefer-correct-identifier-length:
        max-identifier-length: 30
        min-identifier-length: 1

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at
  # https://dart-lang.github.io/linter/lints/index.html.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    - always_use_package_imports
    - avoid_bool_literals_in_conditional_expressions
    - avoid_catching_errors
    - avoid_double_and_int_checks
    - avoid_equals_and_hash_code_on_mutable_classes
    - avoid_escaping_inner_quotes
    - avoid_final_parameters
    - avoid_implementing_value_types
    - avoid_multiple_declarations_per_line
    - avoid_private_typedef_functions
    - avoid_returning_null
    - avoid_returning_null_for_future
    - avoid_returning_this
    - avoid_setters_without_getters
    - avoid_slow_async_io
    - avoid_type_to_string
    - avoid_types_on_closure_parameters
    - avoid_unnecessary_containers
    - avoid_unused_constructor_parameters
    - avoid_void_async
    - avoid_web_libraries_in_flutter
    - cancel_subscriptions
    - cascade_invocations
    - close_sinks
    - conditional_uri_does_not_exist
    - do_not_use_environment
    - eol_at_end_of_file
    - join_return_with_assignment
    - leading_newlines_in_multiline_strings
    - literal_only_boolean_expressions
    - missing_whitespace_between_adjacent_strings
    - no_leading_underscores_for_library_prefixes
    - no_leading_underscores_for_local_identifiers
    - no_logic_in_create_state
    - no_runtimeType_toString
    - noop_primitive_operations
    - null_check_on_nullable_type_parameter
    - package_api_docs
    - parameter_assignments
    - prefer_asserts_in_initializer_lists
    - prefer_asserts_with_message
    - prefer_const_constructors
    - prefer_const_constructors_in_immutables
    - prefer_const_declarations
    - prefer_const_literals_to_create_immutables
    - prefer_constructors_over_static_methods
    - prefer_final_in_for_each
    - prefer_final_locals
    - prefer_foreach
    - prefer_if_elements_to_conditional_expressions
    - prefer_int_literals
    - prefer_interpolation_to_compose_strings
    - prefer_null_aware_method_calls
    - prefer_single_quotes
    - secure_pubspec_urls
    - sort_unnamed_constructors_first
    - throw_in_finally
    - tighten_type_of_initializing_formals
    - type_annotate_public_apis
    - unawaited_futures
    - unnecessary_await_in_return
    - unnecessary_constructor_name
    - unnecessary_lambdas
    - unnecessary_late
    - unnecessary_null_aware_assignments
    - unnecessary_null_checks
    - unnecessary_nullable_for_final_variable_declarations
    - unnecessary_parenthesis
    - unnecessary_raw_strings
    - unsafe_html
    - use_if_null_to_convert_nulls_to_bools
    - use_is_even_rather_than_modulo
    - use_key_in_widget_constructors
    - use_late_for_private_fields_and_variables
    - use_named_constants
    - use_raw_strings
    - use_setters_to_change_properties
    - use_string_buffers
    - use_test_throws_matchers
    - use_to_and_as_if_applicable
    - always_require_non_null_named_parameters
    - annotate_overrides
    - avoid_init_to_null
    - avoid_null_checks_in_equality_operators
    - avoid_relative_lib_imports
    - avoid_return_types_on_setters
    - avoid_shadowing_type_parameters
    - avoid_single_cascade_in_expression_statements
    - avoid_types_as_parameter_names
    - await_only_futures
    - camel_case_extensions
    - curly_braces_in_flow_control_structures
    - empty_catches
    - empty_constructor_bodies
    - library_names
    - library_prefixes
    - no_duplicate_case_values
    - null_closures
    - prefer_adjacent_string_concatenation
    - prefer_collection_literals
    - unnecessary_const
    - prefer_conditional_assignment
    - prefer_equal_for_default_values
    - prefer_final_fields
    - prefer_for_elements_to_map_fromIterable
    - prefer_generic_function_type_aliases
    - prefer_inlined_adds
    - prefer_is_empty
    - prefer_is_not_empty
    - prefer_spread_collections
    - recursive_getters
    - slash_for_doc_comments
    - type_init_formals
    - unnecessary_getters_setters
    - unnecessary_new
    - unnecessary_null_in_if_null_operators
    - unrelated_type_equality_checks
    - use_full_hex_values_for_flutter_colors
    - use_function_type_syntax_for_parameters
    - use_rethrow_when_possible
    - valid_regexps

    # avoid_print: false  # Uncomment to disable the `avoid_print` rule
    # prefer_single_quotes: true  # Uncomment to enable the `prefer_single_quotes` rule

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
